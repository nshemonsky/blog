<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sysadmin | Nick Shemonsky's Blog]]></title>
  <link href="http://blog.nickshemonsky.com/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://blog.nickshemonsky.com/"/>
  <updated>2015-03-02T12:08:39-05:00</updated>
  <id>http://blog.nickshemonsky.com/</id>
  <author>
    <name><![CDATA[Nick Shemonsky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Switch/case Statements]]></title>
    <link href="http://blog.nickshemonsky.com/2014/10/22/python-switchcase-statements/"/>
    <updated>2014-10-22T00:00:00-04:00</updated>
    <id>http://blog.nickshemonsky.com/2014/10/22/python-switchcase-statements</id>
    <content type="html"><![CDATA[<p>Really, this post is about the complete lack thereof. While working on a script
I needed to evaluate one of several potential arguments being passed in from
the command line. Not wanting to write an if/elif/else nested 20 levels deep I
went about doing what seems to be a fairly standard workaround for implementing
a switch statement in Python; I created a dictionary mapping to a function for
each potential option.</p>

<!-- more -->


<p>Let&rsquo;s create a simple demonstration. You could save the below code as <em>math.py</em>.</p>

<pre><code class="python Python switch/case example script">#!/usr/bin/env python2.7
import sys

operation = sys.argv[1]
num = int(sys.argv[2])

def add():
  return (num + num)

def subtract():
  return (num - num)

def multiply():
  return (num * num)

def divide():
  return (num / num)

def error():
  raise SystemExit("Unrecognized operation.")

math_op = {
  "add" : add,
  "subtract" : subtract,
  "multiply" : multiply,
  "divide" : divide,
}

print math_op.get(operation, error)()
</code></pre>

<p>When running this you&rsquo;ll pass in 2 arguments, the operation you want to perform;
add, subtract, multiply, or divide, and a number to use. I&rsquo;ve also included an
error function in case you pass in an operation that isn&rsquo;t supported. I&rsquo;m using
the dictionary get method to handle finding the appropriate operation and
defaulting to error if it&rsquo;s not found.</p>

<pre><code class="bash Running the script">$ ./math.py add 3
6

$ ./math.py multiply 3
9

$ ./math.py divide 3
1

$ ./math.py subtract 3
0

$ ./math.py foo 3
Unrecognized operation.
</code></pre>

<p>Although this is quite simple, it comes in handy. I hope you find it useful.
For some more elegant solutions, see the following:</p>

<ul>
<li><a href="http://code.activestate.com/recipes/410692/" title="Readable switch construction without lambdas or dictionaries">Readable switch construction without lambdas or dictionaries</a></li>
<li><a href="http://code.activestate.com/recipes/410695/" title="Exception-based Switch-Case">Exception-based Switch-Case</a></li>
<li><a href="http://code.activestate.com/recipes/181064/" title="Using a Dictionary in place of a 'switch' statement">Using a Dictionary in place of a switch statement</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automation]]></title>
    <link href="http://blog.nickshemonsky.com/2014/01/30/automation/"/>
    <updated>2014-01-30T00:00:00-05:00</updated>
    <id>http://blog.nickshemonsky.com/2014/01/30/automation</id>
    <content type="html"><![CDATA[<p><img src="http://imgs.xkcd.com/comics/automation.png" alt="This about sums it up..." /><br/>
<a href="http://xkcd.com/1319/">http://xkcd.com/1319/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a LAMP Server on RHEL]]></title>
    <link href="http://blog.nickshemonsky.com/2014/01/28/installing-a-lamp-server-on-rhel/"/>
    <updated>2014-01-28T00:00:00-05:00</updated>
    <id>http://blog.nickshemonsky.com/2014/01/28/installing-a-lamp-server-on-rhel</id>
    <content type="html"><![CDATA[<p>Recently, I signed up for the free tier of Amazon Web Services. I wanted to gain
some exposure to AWS and who can argue against having a free lab environment to
play with?</p>

<p>One of the first things I wanted to do was set up was a web server. I thought
I&rsquo;d document the steps here for future reference. <!-- more --> In this case I
chose to use the free tier version of RHEL. (Accordingly, the instructions below
also apply to CentOS and other Red Hat based distros.) All of this is done as
ec2-user.</p>

<p>After connecting to the instance, the first thing to do is get the system up to
date.</p>

<pre><code>sudo yum update -y
</code></pre>

<p>Next up, install all packages and dependencies for Apache, MySQL and PHP. Also,
install the php-mysql package for MySQL support in any PHP apps.</p>

<pre><code>sudo yum groupinstall -y "Web Server" "MySQL Database Server" "MySQL Database Client" "PHP Support"
sudo yum -y install php-mysql
</code></pre>

<p>If in your particular distro those names don&rsquo;t match up you can search for
the correct group name, e.g:</p>

<pre><code>sudo yum grouplist | grep MySQL
</code></pre>

<p>Now we can start Apache and configure it to start on boot.</p>

<pre><code>sudo service httpd start
sudo chkconfig httpd on&lt;/pre&gt;
</code></pre>

<p>Then allow port 80 traffic. Open up <code>/etc/sysconfig/iptables</code> and add the
following then restart iptables.</p>

<p><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</code></p>

<pre><code>sudo service iptables restart
</code></pre>

<p>At this point you should be able to connect to the public DNS address of your
instance and see the Apache test page. If you can&rsquo;t connect, make sure your AWS
instance is in a security group allowing port 80.</p>

<p>If you connected successfully, set up a quick PHP test</p>

<pre><code>sudo echo "&lt;?php phpinfo(); ?&gt;" &gt; /var/www/html/testphp.php
</code></pre>

<p>Try connecting to <a href="http://your.public.dns/testphp.php.">http://your.public.dns/testphp.php.</a> You should see the PHP
information page. If so, go ahead and remove the testphp file as no one needs to
 see that info about your system.</p>

<pre><code>sudo rm /var/www/html/testphp.php
</code></pre>

<p>Next up, enable MySQL and set it to start on boot.</p>

<pre><code>sudo service mysqld start
sudo chkconfig mysqld on
</code></pre>

<p>Finally, run <code>mysql_secure_installation</code> to set your root MySQL password and
remove all the insecure features.</p>

<pre><code>sudo mysql_secure_installation
</code></pre>

<p>The first question asks for the root password of your instance which by default
is blank so enter through that, then set a root password for the MySQL root user.</p>

<p>Now enter <code>Y</code> for the rest of the questions to:</p>

<ul>
<li> Remove anonymous users</li>
<li> Disable remote root logins</li>
<li> Remove the test database</li>
<li> Reload all privilege tables and save changes</li>
</ul>


<p>That&rsquo;s it! All done in just a few minutes. One last thing, dont forget to set up
permissions on <code>/var/www/</code> accordingly so that ec2-user has access to work with
any files in there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count Running PHP Processes With PowerShell]]></title>
    <link href="http://blog.nickshemonsky.com/2014/01/24/count-running-php-exe-processes/"/>
    <updated>2014-01-24T00:00:00-05:00</updated>
    <id>http://blog.nickshemonsky.com/2014/01/24/count-running-php-exe-processes</id>
    <content type="html"><![CDATA[<p>We have a server that seems to end up going haywire every Friday afternoon,
spawning countless PHP processes. Last week it spiked at over 500 but we didn&rsquo;t
know when it began or ended specifically.</p>

<!-- more -->


<p>I threw together a quick PowerShell script to handle capturing the number of
running processes on a specified interval. This could easily be modified to
ask for any process and server as well making it extremely useful.</p>

<pre><code class="powershell CountPHP_Processes.ps1">Function CountPHP
{
&lt;
    .SYNOPSIS
    Returns count of running PHP processes on &amp;lt;Server&amp;gt;

    .PARAMETER Path
    Specifies the folder path.

    .PARAMETER Interval
    Specifies the interval in seconds between running
    Get-Process on &amp;lt;Server&amp;gt;.

    .PARAMETER EndTime
    Specifies when the script should stop running in the
    format HH:mm

    .EXAMPLE
    CountPHP -Path H:\ -Interval 60 -EndTime 14:00

    Outputs count of php.exe on &amp;lt;Server&amp;gt; every 60 seconds
    from run time until 2pm.
&gt;

    [CmdletBinding()] Param(
        [Parameter(Mandatory=$True)]
        [ValidateScript({Test-Path -Path $_ })]
        [String] $Path,

        [Parameter(Mandatory=$True)]
        [Int32] $Interval,

        [Parameter(Mandatory=$True)]
        [String] $EndTime
    )

    Do {
        #Get the current time
        $Time = (Get-Date)

        [String] $Filename = "PHP_Count_" + "$($Time.Month)" + "_" + "$($Time.Day)" + "_" + "$($Time.Year)" + ".csv"

        #Use join-path to add path to file name
        [String] $FilePath = (Join-Path $Path $FileName)

        $Count = (Get-Process -Name php -ComputerName &amp;lt;Server&amp;gt; | Measure-Object).count

        [pscustomobject]@{
            Time = (Get-Date -Format HH:mm)
            Count = $Count
        } | Export-CSV $Filepath -Append

        Write-Verbose "Saved PHP Count to $FilePath. Sleeping for $Interval seconds"

        Start-Sleep -Seconds $Interval
    }

    While ((Get-Date -Format HH:mm) -lt $EndTime)
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powershell Remoting / Exchange 2010]]></title>
    <link href="http://blog.nickshemonsky.com/2014/01/14/powershell-remoting-exchange-2010-setting-out-of-office/"/>
    <updated>2014-01-14T00:00:00-05:00</updated>
    <id>http://blog.nickshemonsky.com/2014/01/14/powershell-remoting-exchange-2010-setting-out-of-office</id>
    <content type="html"><![CDATA[<p>I was tasked with updating our user creation / tear down tool to set an out of
office message for users when their account is disabled following their
termination.</p>

<p>Initially, I thought this would be as simple as adding a function to run
<code>Set-MailboxConfigurationAutoReply</code> but every time the app tried to set a new
out of office message I received the error: &lsquo;Operation is not valid due to the
current state of the object.&rsquo; <!-- more --></p>

<p>Some google-fu led me to the fact that the way the Exchange commands were being
loaded in the app is not supported in Exchange 2010. This method bypasses RBAC
and in general, many commands just fail to work when a remote connection is
established by force loading the snap-in and dot-sourcing the Remote Exchange
script in a standard PoSH session:</p>

<pre><code class="powershell Loading snap-in via remoting">$Snapin = "Microsoft.Exchange.Management.PowerShell.E2010"

if(Get-PSSnapin -Name $Snapin -ErrorAction SilentlyContinue) {}
elseif(Get-PSSnapin -Name $Snapin -Registered -ErrorAction SilentlyContinue){  
  Add-PSSnapin $Snapin  
  . $env:ExchangeInstallPath\bin\RemoteExchange.ps1  
  Connect-ExchangeServer -auto  
}  
else{$SB.Text = "PSSnapin $Snapin not found"}
</code></pre>

<p>With that being said, I&rsquo;m surprised the Exchange commands in the app have
functioned up until this point without using remoting.</p>

<p>I replaced the above code with the following:</p>

<pre><code class="powershell Loading snap-in without remoting">$s = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://&lt;server&gt;/PowerShell/ -Authentication Kerberos
Import-PSSession $s
</code></pre>

<p>Now, everything works as it should including the
<code>Set-MailboxConfigurationAutoReply</code> command.</p>
]]></content>
  </entry>
  
</feed>
